Duktape reducers are only allowed to be a function. Can't be, say, code
that returns a function. This is limiting as sometimes it is important
to allow more freedom in how the reducing function is defined.

For example, how can we define reducer attributes to be
interpreted by SIT (like, name or idempotency, or references
to schemas)?

Or, how can we define a lexical environment outside of the function?

(Not to mention future potential support for loading modules)

Solution: require reducers to be exported through `module.exports`

This is not yet a "full" CommonJS module support, rather just one bit of
it to allow one specific feature. However, in the future, we can
easily extend it to support `require` and `exports`.

This is a breaking change. Running `sit populate-files` will be
required to update the reducers.

