From d2ea974f19c53c8c4b416729bd49689180589468 Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Mon, 5 Feb 2018 12:56:09 +0700
Subject: [PATCH] Problem: pull requests are not preserved in SIT

The fact of a pull request on GitHub, or the subsequent
conversation do not get preserved in SIT, resulting a loss
of information.

Solution: designate a simple "merge request" workflow
based on MergeRequested record type.
---
 CONTRIBUTING.md                  | 28 ++++++++++++++++-----
 PULL_REQUEST_TEMPLATE.md         |  4 +++
 README.md                        |  8 ++++--
 doc/dict/.type/MergeRequested.md | 23 +++++++++++++++++
 sit-core/src/reducers/core.rs    | 54 +++++++++++++++++++++++++++++++++++++---
 5 files changed, 105 insertions(+), 12 deletions(-)
 create mode 100644 PULL_REQUEST_TEMPLATE.md
 create mode 100644 doc/dict/.type/MergeRequested.md

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index ba04311..6359aaf 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,11 +1,16 @@
+**This project does not accept GitHub Pull Requests**. This is done intentionally,
+as it allows us to maintain the entire history of submitted patches in SIT itself. Any
+opened Pull Requests will be closed. The contributors will be asked to use our
+own merge request procedure (see below).
+
 Our goal is to encourage frictionless contributions to the project. In order to
 achieve that, we use Unprotocols' [C4 process](https://rfc.unprotocols.org/spec:1/C4)
 as an inspiration. Please read it, it will answer a lot of questions. Our goal is to
-merge pull requests as quickly as possible and make new stable releases regularly. 
+merge patches as quickly as possible and make new stable releases regularly. 
 
 In a nutshell, this means:
 
-* We merge pull requests rapidly (try!)
+* We merge patches rapidly (try!)
 * We are open to diverse ideas
 * We prefer code now over consensus later
 
@@ -46,7 +51,18 @@ Solution: explanation of the solution to the problem. Could
 be longer than one line.
 ```
 
-Typically, patches are expected to be submitted over a pull request, but
-if your circumstances preclude you from doing so, you can reach out to
-any maintainer privately by e-mail or any other available means and
-send the patch that way.
+# Preparing a merge request
+
+Once you have a branch (BRANCH) with your patch ready:
+
+1. Create a new issue: `sit issue` and take a note of the generated ID.
+2. Generate patches: `rm -rf git && git format-patch $(git merge-base --fork-point master BRANCH)..BRANCH -o git` (cleaning `git` assures there are no leftover patches)
+2. Edit temporary `text` file to supply the one-line summary (such as `Problem: ...`).
+   It is important to name the file `text` and not something else
+3. Take ID from the first step and run `sit record -t SummaryChanged ID text`
+4. Edit temporary `text` file to prepare details.
+   Provide detailed information for your patch so that others can fully
+   understand it. It is a good etiquette to have one or a few paragraphs.
+4. Take ID from the first step and run `sit record -t DetailsChanged,MergeRequested ID text git/*.patch`
+5. Refer to [this instruction](https://github.com/sit-it/sit#send-it-to-upstream) to send the merge request to the upstream.
+
diff --git a/PULL_REQUEST_TEMPLATE.md b/PULL_REQUEST_TEMPLATE.md
new file mode 100644
index 0000000..b81052f
--- /dev/null
+++ b/PULL_REQUEST_TEMPLATE.md
@@ -0,0 +1,4 @@
+# Pull Requests Are Not Supported
+
+Please refer to [contribution guidelines](https://github.com/sit-it/sit/blob/master/CONTRIBUTING.md)
+for the merge request workflow.
diff --git a/README.md b/README.md
index 9dd52ec..1dcd086 100644
--- a/README.md
+++ b/README.md
@@ -205,6 +205,10 @@ This way, pushing out, will be as nice as `git push issues <branch>`
 
 You will get all issue updates when you fetch this git repository.
 
+### Preparing a merge request
+
+Please refer to [CONTRIBUTING](https://github.com/sit-it/sit/blob/master/CONTRIBUTING.md#preparing-a-merge-request] for the instruction.
+
 ## Overview
 
 <center>
@@ -355,11 +359,11 @@ contributors.
 Our goal is to encourage frictionless contributions to the project. In order to
 achieve that, we use Unprotocols' [C4 process](https://rfc.unprotocols.org/spec:1/C4)
 as an inspiration. Please read it, it will answer a lot of questions. Our goal is to
-merge pull requests as quickly as possible and make new stable releases regularly.
+merge patches as quickly as possible and make new stable releases regularly.
 
 In a nutshell, this means:
 
-* We merge pull requests rapidly (try!)
+* We merge patches rapidly (try!)
 * We are open to diverse ideas
 * We prefer code now over consensus later
 
diff --git a/doc/dict/.type/MergeRequested.md b/doc/dict/.type/MergeRequested.md
new file mode 100644
index 0000000..6b9cd1d
--- /dev/null
+++ b/doc/dict/.type/MergeRequested.md
@@ -0,0 +1,23 @@
+# MergeRequested
+
+Indicates that the record includes a patchset to
+be merged.
+
+## Files
+
+Since SIT is supposed to be SCM-agnostic (or even work with one), it supports
+different ways to describe patchsets. Typically, only one way will be used
+per record (typically, corresponding to the SCM currently used). In situations
+when more than one method is used they all have to be *equivalent* patchsets.
+
+### `git/*.patch`
+
+Patches produced by `git format-patch`
+
+### `patch/*.diff`
+
+Diffs produced by `diff`
+
+## State Effect
+
+Appends `merge_requests` field (array) with the encoded record hash.
diff --git a/sit-core/src/reducers/core.rs b/sit-core/src/reducers/core.rs
index b55a136..efb7ccf 100644
--- a/sit-core/src/reducers/core.rs
+++ b/sit-core/src/reducers/core.rs
@@ -147,16 +147,48 @@ impl<R: Record + RecordExt> Reducer for CommentedReducer<R> {
     }
 }
 
+/// Reduces Commented type
+pub struct MergeRequestedReducer<R: Record>(PhantomData<R>);
+
+impl<R: Record> MergeRequestedReducer<R> {
+    pub fn new() -> Self {
+        MergeRequestedReducer(PhantomData)
+    }
+}
+
+impl<R: Record + RecordExt> Reducer for MergeRequestedReducer<R> {
+    type State = Map<String, JsonValue>;
+    type Item = R;
+
+    fn reduce(&self, mut state: Self::State, item: &Self::Item) -> Self::State {
+        state.entry("merge_requests").or_insert(JsonValue::Array(vec![]));
+        if item.has_type("MergeRequested") {
+            // scope it to unborrow `requests` before it is returned
+            {
+                let requests = state.get_mut("merge_requests").unwrap();
+                let hash = item.encoded_hash();
+                requests.as_array_mut().unwrap().push(JsonValue::String(hash.as_ref().into()));
+            }
+            state
+        } else {
+            state
+        }
+    }
+}
+
+
+/// Combines Closed, SummaryChanged, DetailsChanged, Commented, MergeRequested reducers
+pub struct BasicIssueReducer<R: Record>(ChainedReducer<MergeRequestedReducer<R>,
+    ChainedReducer<CommentedReducer<R>, ChainedReducer< ChainedReducer<IssueClosureReducer<R>, IssueSummaryReducer<R>>,
+    IssueDetailsReducer<R>>>>);
 
-/// Combines Closed, SummaryChanged, DetailsChanged reducers
-pub struct BasicIssueReducer<R: Record>(ChainedReducer<CommentedReducer<R>, ChainedReducer<ChainedReducer<IssueClosureReducer<R>, IssueSummaryReducer<R>>, IssueDetailsReducer<R>>>);
 
 impl<R: Record> BasicIssueReducer<R> {
     pub fn new() -> Self {
-       BasicIssueReducer(CommentedReducer::new()
+       BasicIssueReducer(MergeRequestedReducer::new().chain(CommentedReducer::new()
                              .chain(IssueClosureReducer::new()
                              .chain(IssueSummaryReducer::new())
-                             .chain(IssueDetailsReducer::new())))
+                             .chain(IssueDetailsReducer::new()))))
     }
 }
 
@@ -250,4 +282,18 @@ mod tests {
 
     }
 
+    #[test]
+    fn merge_requested() {
+        let mut tmp = TempDir::new("sit").unwrap().into_path();
+        tmp.push(".sit");
+        let repo = Repository::new(tmp).unwrap();
+        let issue = repo.new_issue().unwrap();
+        let record = issue.new_record(vec![(".type/MergeRequested", &b""[..])].into_iter(), true).unwrap();
+        let state = issue.reduce_with_reducer(MergeRequestedReducer::new()).unwrap();
+        let requests = state.get("merge_requests").unwrap().as_array().unwrap();
+        assert_eq!(requests.len(), 1);
+        assert_eq!(requests[0], record.encoded_hash());
+    }
+
+
 }
\ No newline at end of file
-- 
2.15.0

